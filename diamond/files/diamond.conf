################################################################################
# Diamond Configuration File
################################################################################

################################################################################
### Options for the server
[server]

{% set handlers = [] %}
{%- if salt['pillar.get']('diamond:graphite:plaintext:hosts') -%}
{% do handlers.append('diamond.handler.multigraphite.MultiGraphiteHandler') %}
{%- endif -%}
{%- if salt['pillar.get']('diamond:graphite:pickle:hosts') -%}
{% do handlers.append('diamond.handler.multigraphitepickle.MultiGraphitePickleHandler') %}
{%- endif -%}
# Handlers for published metrics.
handlers = {{ handlers|join(',') }},

# User diamond will run as
# Leave empty to use the current user
user =

# Group diamond will run as
# Leave empty to use the current group
group =

# Pid file
pid_file = /var/run/diamond.pid

# Directory to load collector modules from
collectors_path = /usr/share/diamond/collectors/

# Directory to load collector configs from
collectors_config_path = /etc/diamond/collectors/

# Directory to load handler configs from
handlers_config_path = /etc/diamond/handlers/

# Interval to reload collectors
collectors_reload_interval = 3600

################################################################################
### Options for handlers
[handlers]

# daemon logging handler(s)
keys = syslog,stderr

### Defaults options for all Handlers
[[default]]

[[MultiGraphiteHandler]]
### Options for GraphiteHandler

# Graphite server host
host = {{ salt['pillar.get']('diamond:graphite:plaintext:hosts')|join(',') }},

# Port to send metrics to
port = {{ salt['pillar.get']('diamond:graphite:plaintext:port','2024') }}

# Socket timeout (seconds)
timeout = 1

# Batch size for metrics
batch = 10
max_backlog_multiplier = 4096
trim_backlog_multiplier = 4000

[[MultiGraphitePickleHandler]]
### Options for GraphitePickleHandler

# Graphite server host
host = {{ salt['pillar.get']('diamond:graphite:pickle:hosts')|join(',') }},

# Port to send metrics to
port = {{ salt['pillar.get']('diamond:graphite:pickle:port','2025') }}

# Socket timeout (seconds)
timeout = 1

# Batch size for pickled metrics
batch = 256
max_backlog_multiplier = 4096
trim_backlog_multiplier = 4000

[[StatsdHandler]]
host = 127.0.0.1
port = 8125

[[TSDBHandler]]
host = 127.0.0.1
port = 4242
timeout = 15

[[LibratoHandler]]
user = user@example.com
apikey = abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz01


[[HttpPostHandler]]

### Urp to post the metrics
url = http://localhost:8888/
### Metrics batch size
batch = 100


################################################################################
### Options for collectors
[collectors]

[[default]]
### Defaults options for all Collectors

# Uncomment and set to hardcode a hostname for the collector path
# Keep in mind, periods are seperators in graphite
# hostname = my_custom_hostname

# If you prefer to just use a different way of calculating the hostname
# Uncomment and set this to one of these values:

# smart             = Default. Tries fqdn_short. If that's localhost, uses hostname_short

# fqdn_short        = Default. Similar to hostname -s
# fqdn              = hostname output
# fqdn_rev          = hostname in reverse (com.example.www)

# uname_short       = Similar to uname -n, but only the first part
# uname_rev         = uname -r in reverse (com.example.www)

# hostname_short    = `hostname -s`
# hostname          = `hostname`
# hostname_rev      = `hostname` in reverse (com.example.www)

hostname_method = {{ salt['pillar.get']('diamond:hostname_method', 'smart') }}

# Path Prefix and Suffix
# you can use one or both to craft the path where you want to put metrics
# such as: %(path_prefix)s.$(hostname)s.$(path_suffix)s.$(metric)s
# path_prefix = servers
# path_suffix =
path_prefix = {{ salt['pillar.get']('diamond:prefix', 'servers') }}

# Default Poll Interval (seconds)
interval = 60

################################################################################
### Options for logging
# for more information on file format syntax:
# http://docs.python.org/library/logging.config.html#configuration-file-format

[loggers]

keys = root

# handlers are higher in this config file, in:
# [handlers]
# keys = ...

[formatters]

keys = syslog,stderr

[logger_root]

# to increase verbosity, set DEBUG
level = DEBUG
{%- if grains['os'] == 'Ubuntu' %}
handlers = stderr
{%- else %}
handlers = syslog
{%- endif %}
propagate = 1

[handler_syslog]

class = logging.handlers.SysLogHandler
level = INFO
formatter = syslog
args = ("/dev/log",)

[handler_stderr]

class = logging.StreamHandler
level = INFO
formatter = stderr
args = ()

[formatter_syslog]

format = %(asctime)s diamond[%(process)d]: %(message)s
datefmt = %b %e %H:%M:%S

[formatter_stderr]

format = %(asctime)s %(levelname)-8s %(name)-15s %(message)s
datefmt = %Y-%m-%d %H:%M:%S

